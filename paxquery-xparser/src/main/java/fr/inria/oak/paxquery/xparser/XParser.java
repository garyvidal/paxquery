/* Generated By:JavaCC: Do not edit this line. XParser.java */
package fr.inria.oak.paxquery.xparser;

public class XParser implements XParserConstants {
  public static void main(String args[]) throws ParseException
  {
    boolean success = false;
        XParser parser = new XParser(System.in);
        while(true)
        {
                success = false;
                System.out.println("Enter an XPath (subset) expresion and hit ENTER: ");
                try
                {

                        parser.Start();
                        success = true;
                        System.out.println("CORRECT");
                }
                catch(Exception ex)
                {
                  success = false;
                        System.out.println("EXCEPTION: "+ex.getMessage());
                }
                catch(Error er)
                {
                  success = false;
                        System.out.println("ERROR: "+er.getMessage());
                }
                finally
                {
                  System.out.println("Success: "+success);
                  parser.ReInit(System.in);
                }
        }
  }

  public static boolean test_main(String query)
  {
    try
    {
      XParser parser = new XParser(new java.io.ByteArrayInputStream(query.getBytes()));
      parser.Start();
          System.out.println("CORRECT");
      return true;
    }
    catch(Exception ex)
    {
      System.out.println("Exception on query: "+query);
      System.out.println(ex.getMessage());
      return false;
    }
    catch(Error er)
    {
      System.out.println("Error on query: "+query);
      System.out.println(er.getMessage());
      return false;
    }
  }

  final public void Start() throws ParseException {
    trace_call("Start");
    try {
      Expr();
      jj_consume_token(3);
    } finally {
      trace_return("Start");
    }
  }

  final public void Expr() throws ParseException {
    trace_call("Expr");
    try {
      OrExpr();
    } finally {
      trace_return("Expr");
    }
  }

  final public void OrExpr() throws ParseException {
    trace_call("OrExpr");
    try {
      AndExpr();
      OrExpr2();
    } finally {
      trace_return("OrExpr");
    }
  }

  final public void OrExpr2() throws ParseException {
    trace_call("OrExpr2");
    try {
      if (jj_2_1(5)) {
        jj_consume_token(4);
        AndExpr();
        OrExpr2();
      } else {

      }
    } finally {
      trace_return("OrExpr2");
    }
  }

  final public void AndExpr() throws ParseException {
    trace_call("AndExpr");
    try {
      EqualityExpr();
      AndExpr2();
    } finally {
      trace_return("AndExpr");
    }
  }

  final public void AndExpr2() throws ParseException {
    trace_call("AndExpr2");
    try {
      if (jj_2_2(5)) {
        jj_consume_token(5);
        EqualityExpr();
        AndExpr2();
      } else {

      }
    } finally {
      trace_return("AndExpr2");
    }
  }

  final public void EqualityExpr() throws ParseException {
    trace_call("EqualityExpr");
    try {
      RelationalExpr();
      EqualityExpr2();
    } finally {
      trace_return("EqualityExpr");
    }
  }

  final public void EqualityExpr2() throws ParseException {
    trace_call("EqualityExpr2");
    try {
      if (jj_2_3(5)) {
        jj_consume_token(6);
        RelationalExpr();
        EqualityExpr2();
      } else if (jj_2_4(5)) {
        jj_consume_token(7);
        RelationalExpr();
        EqualityExpr2();
      } else {

      }
    } finally {
      trace_return("EqualityExpr2");
    }
  }

  final public void RelationalExpr() throws ParseException {
    trace_call("RelationalExpr");
    try {
      AdditiveExpr();
      RelationalExpr2();
    } finally {
      trace_return("RelationalExpr");
    }
  }

  final public void RelationalExpr2() throws ParseException {
    trace_call("RelationalExpr2");
    try {
      if (jj_2_5(5)) {
        jj_consume_token(8);
        AdditiveExpr();
        RelationalExpr2();
      } else if (jj_2_6(5)) {
        jj_consume_token(9);
        AdditiveExpr();
        RelationalExpr2();
      } else if (jj_2_7(5)) {
        jj_consume_token(10);
        AdditiveExpr();
        RelationalExpr2();
      } else if (jj_2_8(5)) {
        jj_consume_token(11);
        AdditiveExpr();
        RelationalExpr2();
      } else {

      }
    } finally {
      trace_return("RelationalExpr2");
    }
  }

  final public void AdditiveExpr() throws ParseException {
    trace_call("AdditiveExpr");
    try {
      MultiplicativeExpr();
      AdditiveExpr2();
    } finally {
      trace_return("AdditiveExpr");
    }
  }

  final public void AdditiveExpr2() throws ParseException {
    trace_call("AdditiveExpr2");
    try {
      if (jj_2_9(5)) {
        jj_consume_token(12);
        MultiplicativeExpr();
        AdditiveExpr2();
      } else if (jj_2_10(5)) {
        jj_consume_token(13);
        MultiplicativeExpr();
        AdditiveExpr2();
      } else {

      }
    } finally {
      trace_return("AdditiveExpr2");
    }
  }

  final public void MultiplicativeExpr() throws ParseException {
    trace_call("MultiplicativeExpr");
    try {
      UnaryExpr();
      MultiplicativeExpr2();
    } finally {
      trace_return("MultiplicativeExpr");
    }
  }

  final public void MultiplicativeExpr2() throws ParseException {
    trace_call("MultiplicativeExpr2");
    try {
      if (jj_2_11(5)) {
        jj_consume_token(14);
        UnaryExpr();
        MultiplicativeExpr2();
      } else if (jj_2_12(5)) {
        jj_consume_token(15);
        UnaryExpr();
        MultiplicativeExpr2();
      } else if (jj_2_13(5)) {
        jj_consume_token(16);
        UnaryExpr();
        MultiplicativeExpr2();
      } else {

      }
    } finally {
      trace_return("MultiplicativeExpr2");
    }
  }

  final public void UnaryExpr() throws ParseException {
    trace_call("UnaryExpr");
    try {
      if (jj_2_14(5)) {
        UnionExpr();
      } else if (jj_2_15(5)) {
        jj_consume_token(13);
        UnaryExpr();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("UnaryExpr");
    }
  }

  final public void UnionExpr() throws ParseException {
    trace_call("UnionExpr");
    try {
      ValueExpr();
      label_1:
      while (true) {
        if (jj_2_16(5)) {
          ;
        } else {
          break label_1;
        }
        jj_consume_token(17);
        ValueExpr();
      }
    } finally {
      trace_return("UnionExpr");
    }
  }

  final public void ValueExpr() throws ParseException {
    trace_call("ValueExpr");
    try {
      if (jj_2_20(5)) {
        FilterExpr();
        if (jj_2_19(5)) {
          if (jj_2_17(5)) {
            jj_consume_token(18);
          } else if (jj_2_18(5)) {
            jj_consume_token(19);
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
          RelativePathExpr();
        } else {
          ;
        }
      } else if (jj_2_21(5)) {
        PathExpr();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("ValueExpr");
    }
  }

  final public void PathExpr() throws ParseException {
    trace_call("PathExpr");
    try {
      if (jj_2_23(5)) {
        jj_consume_token(18);
        if (jj_2_22(5)) {
          RelativePathExpr();
        } else {
          ;
        }
      } else if (jj_2_24(5)) {
        jj_consume_token(19);
        RelativePathExpr();
      } else if (jj_2_25(5)) {
        RelativePathExpr();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("PathExpr");
    }
  }

  final public void RelativePathExpr() throws ParseException {
    trace_call("RelativePathExpr");
    try {
      StepExpr();
      label_2:
      while (true) {
        if (jj_2_26(5)) {
          ;
        } else {
          break label_2;
        }
        if (jj_2_27(5)) {
          jj_consume_token(18);
        } else if (jj_2_28(5)) {
          jj_consume_token(19);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        StepExpr();
      }
    } finally {
      trace_return("RelativePathExpr");
    }
  }

  final public void StepExpr() throws ParseException {
    trace_call("StepExpr");
    try {
      AxisStep();
    } finally {
      trace_return("StepExpr");
    }
  }

  final public void AxisStep() throws ParseException {
    trace_call("AxisStep");
    try {
      ForwardStep();
      PredicateList();
    } finally {
      trace_return("AxisStep");
    }
  }

  final public void ForwardStep() throws ParseException {
    trace_call("ForwardStep");
    try {
      AbbrevForwardStep();
    } finally {
      trace_return("ForwardStep");
    }
  }

  final public void AbbrevForwardStep() throws ParseException {
    trace_call("AbbrevForwardStep");
    try {
      if (jj_2_29(5)) {
        jj_consume_token(20);
      } else {
        ;
      }
      NodeTest();
    } finally {
      trace_return("AbbrevForwardStep");
    }
  }

  final public void NodeTest() throws ParseException {
    trace_call("NodeTest");
    try {
      if (jj_2_30(5)) {
        KindTest();
      } else if (jj_2_31(5)) {
        NameTest();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("NodeTest");
    }
  }

  final public void KindTest() throws ParseException {
    trace_call("KindTest");
    try {
      TextTest();
    } finally {
      trace_return("KindTest");
    }
  }

  final public void NameTest() throws ParseException {
    trace_call("NameTest");
    try {
      if (jj_2_32(5)) {
        jj_consume_token(15);
      } else if (jj_2_33(5)) {
        jj_consume_token(16);
      } else if (jj_2_34(5)) {
        QName();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("NameTest");
    }
  }

  final public void FilterExpr() throws ParseException {
    trace_call("FilterExpr");
    try {
      PrimaryExpr();
      PredicateList();
    } finally {
      trace_return("FilterExpr");
    }
  }

  final public void PredicateList() throws ParseException {
    trace_call("PredicateList");
    try {
      label_3:
      while (true) {
        if (jj_2_35(5)) {
          ;
        } else {
          break label_3;
        }
        Predicate();
      }
    } finally {
      trace_return("PredicateList");
    }
  }

  final public void Predicate() throws ParseException {
    trace_call("Predicate");
    try {
      jj_consume_token(21);
      Expr();
      jj_consume_token(22);
    } finally {
      trace_return("Predicate");
    }
  }

  final public void PrimaryExpr() throws ParseException {
    trace_call("PrimaryExpr");
    try {
      if (jj_2_36(5)) {
        Literal();
      } else if (jj_2_37(5)) {
        ParenthesizedExpr();
      } else if (jj_2_38(5)) {
        FunctionCall();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("PrimaryExpr");
    }
  }

  final public void Literal() throws ParseException {
    trace_call("Literal");
    try {
      if (jj_2_39(5)) {
        NumericLiteral();
      } else if (jj_2_40(5)) {
        jj_consume_token(StringLiteral);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("Literal");
    }
  }

  final public void NumericLiteral() throws ParseException {
    trace_call("NumericLiteral");
    try {
      if (jj_2_41(5)) {
        jj_consume_token(IntegerLiteral);
      } else if (jj_2_42(5)) {
        jj_consume_token(DecimalLiteral);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("NumericLiteral");
    }
  }

  final public void ParenthesizedExpr() throws ParseException {
    trace_call("ParenthesizedExpr");
    try {
      jj_consume_token(23);
      Expr();
      jj_consume_token(24);
    } finally {
      trace_return("ParenthesizedExpr");
    }
  }

  final public void FunctionCall() throws ParseException {
    trace_call("FunctionCall");
    try {
      FunctionName();
      jj_consume_token(23);
      if (jj_2_44(5)) {
        Expr();
        label_4:
        while (true) {
          if (jj_2_43(5)) {
            ;
          } else {
            break label_4;
          }
          jj_consume_token(25);
          Expr();
        }
      } else {
        ;
      }
      jj_consume_token(24);
    } finally {
      trace_return("FunctionCall");
    }
  }

  final public void FunctionName() throws ParseException {
    trace_call("FunctionName");
    try {
      if (jj_2_45(5)) {
        jj_consume_token(26);
      } else if (jj_2_46(5)) {
        jj_consume_token(27);
      } else if (jj_2_47(5)) {
        jj_consume_token(28);
      } else if (jj_2_48(5)) {
        jj_consume_token(29);
      } else if (jj_2_49(5)) {
        jj_consume_token(30);
      } else if (jj_2_50(5)) {
        jj_consume_token(31);
      } else if (jj_2_51(5)) {
        jj_consume_token(32);
      } else if (jj_2_52(5)) {
        jj_consume_token(33);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("FunctionName");
    }
  }

  final public void TextTest() throws ParseException {
    trace_call("TextTest");
    try {
      jj_consume_token(26);
      if (jj_2_53(5)) {
        jj_consume_token(23);
        jj_consume_token(24);
      } else {
        ;
      }
    } finally {
      trace_return("TextTest");
    }
  }

  final public void QName() throws ParseException {
    trace_call("QName");
    try {
      jj_consume_token(QNameToken);
    } finally {
      trace_return("QName");
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  private boolean jj_3_15() {
    if (jj_scan_token(13)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) return true;
    }
    return false;
  }

  private boolean jj_3_51() {
    if (jj_scan_token(32)) return true;
    return false;
  }

  private boolean jj_3R_36() {
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(16)) return true;
    if (jj_3R_15()) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(15)) return true;
    if (jj_3R_15()) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(14)) return true;
    if (jj_3R_15()) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_3R_15()) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_50() {
    if (jj_scan_token(31)) return true;
    return false;
  }

  private boolean jj_3R_35() {
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(13)) return true;
    if (jj_3R_13()) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_scan_token(12)) return true;
    if (jj_3R_13()) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_49() {
    if (jj_scan_token(30)) return true;
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_3R_13()) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3_48() {
    if (jj_scan_token(29)) return true;
    return false;
  }

  private boolean jj_3R_34() {
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(11)) return true;
    if (jj_3R_11()) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(10)) return true;
    if (jj_3R_11()) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(9)) return true;
    if (jj_3R_11()) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(8)) return true;
    if (jj_3R_11()) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_43() {
    if (jj_scan_token(25)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_3R_11()) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3_47() {
    if (jj_scan_token(28)) return true;
    return false;
  }

  private boolean jj_3_44() {
    if (jj_3R_30()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_43()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_33() {
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(7)) return true;
    if (jj_3R_9()) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3_53() {
    if (jj_scan_token(23)) return true;
    if (jj_scan_token(24)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(6)) return true;
    if (jj_3R_9()) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_46() {
    if (jj_scan_token(27)) return true;
    return false;
  }

  private boolean jj_3R_7() {
    if (jj_3R_9()) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(26)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_53()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_42() {
    if (jj_scan_token(DecimalLiteral)) return true;
    return false;
  }

  private boolean jj_3R_32() {
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(5)) return true;
    if (jj_3R_7()) return true;
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) return true;
    }
    return false;
  }

  private boolean jj_3R_41() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_45()) {
    jj_scanpos = xsp;
    if (jj_3_46()) {
    jj_scanpos = xsp;
    if (jj_3_47()) {
    jj_scanpos = xsp;
    if (jj_3_48()) {
    jj_scanpos = xsp;
    if (jj_3_49()) {
    jj_scanpos = xsp;
    if (jj_3_50()) {
    jj_scanpos = xsp;
    if (jj_3_51()) {
    jj_scanpos = xsp;
    if (jj_3_52()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_45() {
    if (jj_scan_token(26)) return true;
    return false;
  }

  private boolean jj_3R_5() {
    if (jj_3R_7()) return true;
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_41()) return true;
    if (jj_scan_token(23)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_44()) jj_scanpos = xsp;
    if (jj_scan_token(24)) return true;
    return false;
  }

  private boolean jj_3R_31() {
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(23)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(24)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(4)) return true;
    if (jj_3R_5()) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3R_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    }
    return false;
  }

  private boolean jj_3_41() {
    if (jj_scan_token(IntegerLiteral)) return true;
    return false;
  }

  private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_41()) {
    jj_scanpos = xsp;
    if (jj_3_42()) return true;
    }
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_3R_5()) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3_39() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3_40() {
    if (jj_scan_token(StringLiteral)) return true;
    return false;
  }

  private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3_40()) return true;
    }
    return false;
  }

  private boolean jj_3_38() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3_37() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_36()) {
    jj_scanpos = xsp;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_3_38()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_36() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_scan_token(21)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(22)) return true;
    return false;
  }

  private boolean jj_3_34() {
    if (jj_scan_token(37)) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_35() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_35()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_33() {
    if (jj_scan_token(16)) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_3R_37()) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_31() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3_34()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_32() {
    if (jj_scan_token(15)) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3_30() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3_31()) return true;
    }
    return false;
  }

  private boolean jj_3_24() {
    if (jj_scan_token(19)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_28() {
    if (jj_scan_token(19)) return true;
    return false;
  }

  private boolean jj_3_29() {
    if (jj_scan_token(20)) return true;
    return false;
  }

  private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_29()) jj_scanpos = xsp;
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_scan_token(18)) return true;
    return false;
  }

  private boolean jj_3_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) return true;
    }
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_scan_token(19)) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_3R_43()) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_scan_token(18)) return true;
    return false;
  }

  private boolean jj_3_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) return true;
    }
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_3R_22()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_26()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_scan_token(18)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_scan_token(17)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3_25()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_20() {
    if (jj_3R_20()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) return true;
    }
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_3R_18()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_16()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_52() {
    if (jj_scan_token(33)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public XParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[53];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public XParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public XParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new XParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public XParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new XParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public XParser(XParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(XParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[49];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 49; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 53; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
