/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. TreePatternParser.jj */
/*@egen*/
/*******************************************************************************
 * Copyright (C) 2013, 2014 by Inria and Paris-Sud University
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/

options {
             
               
                         
                        
  STATIC=false;
}

PARSER_BEGIN(TreePatternParser)
package fr.inria.oak.paxquery.common.xml.treepattern.test.parser;

import java.io.*;
import fr.inria.oak.paxquery.common.xml.treepattern.core.TreePattern;

public class TreePatternParser/*@bgen(jjtree)*/implements TreePatternParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTTreePatternParserState jjtree = new JJTTreePatternParserState();

/*@egen*/

}
PARSER_END(TreePatternParser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL: ["1"-"9"] (["0"-"9"])* >
}

TOKEN : /* STRING */
{
	< STRING: "\"" (~["\""])* "\"" >
}

TOKEN : /* STRING */
{
    <ATTRDOCID: "docID" >
	| <ATTRID: "ID" >
	| <ATTRVAL: "Val" >
	| <ATTRCONT: "Cont" >
   	| <PREDCODE: "=" | "!=" | ">=" | ">" | "<=" | "<">
}

ASTStart Start(String TreePatternName)        : {/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  
  TreePatternSpec() <EOF>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void TreePatternSpec() : {}
{
	(/*@bgen(jjtree) TreePatternSpec */
          {
            ASTTreePatternSpec jjtn001 = new ASTTreePatternSpec(JJTTREEPATTERNSPEC);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          }
          try {
/*@egen*/ ( IsOrdered() IsRoot() DefaultNamespace() NSpec() ";" ESpec() )/*@bgen(jjtree)*/
          } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              throw (RuntimeException)jjte001;
            }
            if (jjte001 instanceof ParseException) {
              throw (ParseException)jjte001;
            }
            throw (Error)jjte001;
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
            }
          }
/*@egen*/                  )
}

void IsRoot() : {} 
{
	(/*@bgen(jjtree) ROOT */
         {
           ASTROOT jjtn001 = new ASTROOT(JJTROOT);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
         }
         try {
/*@egen*/("/")/*@bgen(jjtree)*/
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
           }
         }
/*@egen*/      )?
}

void IsOrdered() : {} 
{
	(/*@bgen(jjtree) TreePatternOrdered */
         {
           ASTTreePatternOrdered jjtn001 = new ASTTreePatternOrdered(JJTTREEPATTERNORDERED);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
         }
         try {
/*@egen*/("o"|"O")/*@bgen(jjtree)*/
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
           }
         }
/*@egen*/                    )?
}

void DefaultNamespace() : {} 
{
	(/*@bgen(jjtree) DefaultNamespace */
         {
           ASTDefaultNamespace jjtn001 = new ASTDefaultNamespace(JJTDEFAULTNAMESPACE);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
         }
         try {
/*@egen*/("[Namespace=" Content()"]")/*@bgen(jjtree)*/
         } catch (Throwable jjte001) {
           if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof RuntimeException) {
             throw (RuntimeException)jjte001;
           }
           if (jjte001 instanceof ParseException) {
             throw (ParseException)jjte001;
           }
           throw (Error)jjte001;
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
           }
         }
/*@egen*/                  )?
}

void NSpec() : {}
{/*@bgen(jjtree) NSPEC */
        {
          ASTNSPEC jjtn001 = new ASTNSPEC(JJTNSPEC);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	((NE()|NA()))*/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/       
}

void NE() : {}
{/*@bgen(jjtree) NE */
        {
          ASTNE jjtn001 = new ASTNE(JJTNE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	("E:" MyID() (IDSpec())? (TSpec())? (VSpec())? (CSpec())? )/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/    
}

void NA() : {}
{/*@bgen(jjtree) NA */
        {
          ASTNA jjtn001 = new ASTNA(JJTNA);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	("A:" MyID()  (IDSpec())?  (TSpec()) ? (VSpec())? (CSpec())? )/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/    
}

void IDSpec()  : {}
{/*@bgen(jjtree) IDSpec */
        {
          ASTIDSpec jjtn007 = new ASTIDSpec(JJTIDSPEC);
          boolean jjtc007 = true;
          jjtree.openNodeScope(jjtn007);
        }
        try {
/*@egen*/
	(("ID" (/*@bgen(jjtree) Structural */
                        {
                          ASTStructural jjtn001 = new ASTStructural(JJTSTRUCTURAL);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
                        }
                        try {
/*@egen*/
			"s"/*@bgen(jjtree)*/
                        } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001, true);
                          }
                        }
/*@egen*/             |/*@bgen(jjtree) Ordered */
                        {
                          ASTOrdered jjtn002 = new ASTOrdered(JJTORDERED);
                          boolean jjtc002 = true;
                          jjtree.openNodeScope(jjtn002);
                        }
                        try {
/*@egen*/
			"o"/*@bgen(jjtree)*/
                        } finally {
                          if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002, true);
                          }
                        }
/*@egen*/          |/*@bgen(jjtree) Integer */
                        {
                          ASTInteger jjtn003 = new ASTInteger(JJTINTEGER);
                          boolean jjtc003 = true;
                          jjtree.openNodeScope(jjtn003);
                        }
                        try {
/*@egen*/
			"i"/*@bgen(jjtree)*/
                        } finally {
                          if (jjtc003) {
                            jjtree.closeNodeScope(jjtn003, true);
                          }
                        }
/*@egen*/          |/*@bgen(jjtree) Navigating */
                        {
                          ASTNavigating jjtn004 = new ASTNavigating(JJTNAVIGATING);
                          boolean jjtc004 = true;
                          jjtree.openNodeScope(jjtn004);
                        }
                        try {
/*@egen*/
			"n"/*@bgen(jjtree)*/
                        } finally {
                          if (jjtc004) {
                            jjtree.closeNodeScope(jjtn004, true);
                          }
                        }
/*@egen*/             |/*@bgen(jjtree) Updating */
                        {
                          ASTUpdating jjtn005 = new ASTUpdating(JJTUPDATING);
                          boolean jjtc005 = true;
                          jjtree.openNodeScope(jjtn005);
                        }
                        try {
/*@egen*/
			"u"/*@bgen(jjtree)*/
                        } finally {
                          if (jjtc005) {
                            jjtree.closeNodeScope(jjtn005, true);
                          }
                        }
/*@egen*/           
			)
	)  (/*@bgen(jjtree) Required */
            {
              ASTRequired jjtn006 = new ASTRequired(JJTREQUIRED);
              boolean jjtc006 = true;
              jjtree.openNodeScope(jjtn006);
            }
            try {
/*@egen*/("R")/*@bgen(jjtree)*/
            } finally {
              if (jjtc006) {
                jjtree.closeNodeScope(jjtn006, true);
              }
            }
/*@egen*/          )? )/*@bgen(jjtree)*/
        } finally {
          if (jjtc007) {
            jjtree.closeNodeScope(jjtn007, true);
          }
        }
/*@egen*/         
}

void TSpec() : {}
{
	(	
		((/*@bgen(jjtree) TagRestriction */
                  {
                    ASTTagRestriction jjtn001 = new ASTTagRestriction(JJTTAGRESTRICTION);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                  }
                  try {
/*@egen*/("[Tag=" Content()"]")/*@bgen(jjtree)*/
                  } catch (Throwable jjte001) {
                    if (jjtc001) {
                      jjtree.clearNodeScope(jjtn001);
                      jjtc001 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte001 instanceof RuntimeException) {
                      throw (RuntimeException)jjte001;
                    }
                    if (jjte001 instanceof ParseException) {
                      throw (ParseException)jjte001;
                    }
                    throw (Error)jjte001;
                  } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001, true);
                    }
                  }
/*@egen*/                ) (/*@bgen(jjtree) TagFull */
                                                           {
                                                             ASTTagFull jjtn003 = new ASTTagFull(JJTTAGFULL);
                                                             boolean jjtc003 = true;
                                                             jjtree.openNodeScope(jjtn003);
                                                           }
                                                           try {
/*@egen*/("Tag" (/*@bgen(jjtree) Required */
                                                                   {
                                                                     ASTRequired jjtn002 = new ASTRequired(JJTREQUIRED);
                                                                     boolean jjtc002 = true;
                                                                     jjtree.openNodeScope(jjtn002);
                                                                   }
                                                                   try {
/*@egen*/("R")/*@bgen(jjtree)*/
                                                                   } finally {
                                                                     if (jjtc002) {
                                                                       jjtree.closeNodeScope(jjtn002, true);
                                                                     }
                                                                   }
/*@egen*/          )?)/*@bgen(jjtree)*/
                                                           } finally {
                                                             if (jjtc003) {
                                                               jjtree.closeNodeScope(jjtn003, true);
                                                             }
                                                           }
/*@egen*/         )? )| (("Tag")/*@bgen(jjtree) Tag */
                                                                                                             {
                                                                                                               ASTTag jjtn005 = new ASTTag(JJTTAG);
                                                                                                               boolean jjtc005 = true;
                                                                                                               jjtree.openNodeScope(jjtn005);
                                                                                                             }
                                                                                                             try {
/*@egen*/ ((/*@bgen(jjtree) Required */
                                                                                                               {
                                                                                                                 ASTRequired jjtn004 = new ASTRequired(JJTREQUIRED);
                                                                                                                 boolean jjtc004 = true;
                                                                                                                 jjtree.openNodeScope(jjtn004);
                                                                                                               }
                                                                                                               try {
/*@egen*/("R")/*@bgen(jjtree)*/
                                                                                                               } finally {
                                                                                                                 if (jjtc004) {
                                                                                                                   jjtree.closeNodeScope(jjtn004, true);
                                                                                                                 }
                                                                                                               }
/*@egen*/          )?)/*@bgen(jjtree)*/
                                                                                                             } finally {
                                                                                                               if (jjtc005) {
                                                                                                                 jjtree.closeNodeScope(jjtn005, true);
                                                                                                               }
                                                                                                             }
/*@egen*/     )
	) 
}

void VSpec() : {}
{
	(	
		((/*@bgen(jjtree) ValRestriction */
                  {
                    ASTValRestriction jjtn001 = new ASTValRestriction(JJTVALRESTRICTION);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                  }
                  try {
/*@egen*/("[Val" PredCode()  (Content() | MyID())"]")/*@bgen(jjtree)*/
                  } catch (Throwable jjte001) {
                    if (jjtc001) {
                      jjtree.clearNodeScope(jjtn001);
                      jjtc001 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte001 instanceof RuntimeException) {
                      throw (RuntimeException)jjte001;
                    }
                    if (jjte001 instanceof ParseException) {
                      throw (ParseException)jjte001;
                    }
                    throw (Error)jjte001;
                  } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001, true);
                    }
                  }
/*@egen*/                ) (/*@bgen(jjtree) ValFull */
                                                                                 {
                                                                                   ASTValFull jjtn003 = new ASTValFull(JJTVALFULL);
                                                                                   boolean jjtc003 = true;
                                                                                   jjtree.openNodeScope(jjtn003);
                                                                                 }
                                                                                 try {
/*@egen*/("Val" (/*@bgen(jjtree) Required */
                                                                                         {
                                                                                           ASTRequired jjtn002 = new ASTRequired(JJTREQUIRED);
                                                                                           boolean jjtc002 = true;
                                                                                           jjtree.openNodeScope(jjtn002);
                                                                                         }
                                                                                         try {
/*@egen*/("R")/*@bgen(jjtree)*/
                                                                                         } finally {
                                                                                           if (jjtc002) {
                                                                                             jjtree.closeNodeScope(jjtn002, true);
                                                                                           }
                                                                                         }
/*@egen*/          )?)/*@bgen(jjtree)*/
                                                                                 } finally {
                                                                                   if (jjtc003) {
                                                                                     jjtree.closeNodeScope(jjtn003, true);
                                                                                   }
                                                                                 }
/*@egen*/         )? )| (("Val")/*@bgen(jjtree) Val */
                                                                                                                                   {
                                                                                                                                     ASTVal jjtn005 = new ASTVal(JJTVAL);
                                                                                                                                     boolean jjtc005 = true;
                                                                                                                                     jjtree.openNodeScope(jjtn005);
                                                                                                                                   }
                                                                                                                                   try {
/*@egen*/ ((/*@bgen(jjtree) Required */
                                                                                                                                     {
                                                                                                                                       ASTRequired jjtn004 = new ASTRequired(JJTREQUIRED);
                                                                                                                                       boolean jjtc004 = true;
                                                                                                                                       jjtree.openNodeScope(jjtn004);
                                                                                                                                     }
                                                                                                                                     try {
/*@egen*/("R")/*@bgen(jjtree)*/
                                                                                                                                     } finally {
                                                                                                                                       if (jjtc004) {
                                                                                                                                         jjtree.closeNodeScope(jjtn004, true);
                                                                                                                                       }
                                                                                                                                     }
/*@egen*/          )?)/*@bgen(jjtree)*/
                                                                                                                                   } finally {
                                                                                                                                     if (jjtc005) {
                                                                                                                                       jjtree.closeNodeScope(jjtn005, true);
                                                                                                                                     }
                                                                                                                                   }
/*@egen*/     )
	) 
}

void CSpec()        : {/*@bgen(jjtree) CSpec */
  ASTCSpec jjtn000 = new ASTCSpec(JJTCSPEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CSpec */
        try {
/*@egen*/
	"Cont"/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void PredCode()           :
{/*@bgen(jjtree) PredCode */
  ASTPredCode jjtn000 = new ASTPredCode(JJTPREDCODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) PredCode */
  try {
/*@egen*/
  t=<PREDCODE>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.setName(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Content()          :
{/*@bgen(jjtree) Content */
  ASTContent jjtn000 = new ASTContent(JJTCONTENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Content */
  try {
/*@egen*/
  t=<STRING>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.setName(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void MyID()       :
{/*@bgen(jjtree) MyID */
  ASTMyID jjtn000 = new ASTMyID(JJTMYID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) MyID */
  try {
/*@egen*/
  t=<INTEGER_LITERAL>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.setName(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ESpec()   :{}
{
	(/*@bgen(jjtree) EdgeSpec */
          {
            ASTEdgeSpec jjtn007 = new ASTEdgeSpec(JJTEDGESPEC);
            boolean jjtc007 = true;
            jjtree.openNodeScope(jjtn007);
          }
          try {
/*@egen*/ (MyID() "," MyID() (/*@bgen(jjtree) Descendant */
                               {
                                 ASTDescendant jjtn001 = new ASTDescendant(JJTDESCENDANT);
                                 boolean jjtc001 = true;
                                 jjtree.openNodeScope(jjtn001);
                               }
                               try {
/*@egen*/ "//"/*@bgen(jjtree)*/
                               } finally {
                                 if (jjtc001) {
                                   jjtree.closeNodeScope(jjtn001, true);
                                 }
                               }
/*@egen*/             |/*@bgen(jjtree) Child */
                                                 {
                                                   ASTChild jjtn002 = new ASTChild(JJTCHILD);
                                                   boolean jjtc002 = true;
                                                   jjtree.openNodeScope(jjtn002);
                                                 }
                                                 try {
/*@egen*/"/"/*@bgen(jjtree)*/
                                                 } finally {
                                                   if (jjtc002) {
                                                     jjtree.closeNodeScope(jjtn002, true);
                                                   }
                                                 }
/*@egen*/        ) (/*@bgen(jjtree) Nested */
                                                               {
                                                                 ASTNested jjtn003 = new ASTNested(JJTNESTED);
                                                                 boolean jjtc003 = true;
                                                                 jjtree.openNodeScope(jjtn003);
                                                               }
                                                               try {
/*@egen*/"n"/*@bgen(jjtree)*/
                                                               } finally {
                                                                 if (jjtc003) {
                                                                   jjtree.closeNodeScope(jjtn003, true);
                                                                 }
                                                               }
/*@egen*/        )? (/*@bgen(jjtree) Outer */
                                                                              {
                                                                                ASTOuter jjtn004 = new ASTOuter(JJTOUTER);
                                                                                boolean jjtc004 = true;
                                                                                jjtree.openNodeScope(jjtn004);
                                                                              }
                                                                              try {
/*@egen*/"o"/*@bgen(jjtree)*/
                                                                              } finally {
                                                                                if (jjtc004) {
                                                                                  jjtree.closeNodeScope(jjtn004, true);
                                                                                }
                                                                              }
/*@egen*/        |/*@bgen(jjtree) Join */
                                                                                          {
                                                                                            ASTJoin jjtn005 = new ASTJoin(JJTJOIN);
                                                                                            boolean jjtc005 = true;
                                                                                            jjtree.openNodeScope(jjtn005);
                                                                                          }
                                                                                          try {
/*@egen*/"j"/*@bgen(jjtree)*/
                                                                                          } finally {
                                                                                            if (jjtc005) {
                                                                                              jjtree.closeNodeScope(jjtn005, true);
                                                                                            }
                                                                                          }
/*@egen*/       |/*@bgen(jjtree) Semi */
                                                                                                     {
                                                                                                       ASTSemi jjtn006 = new ASTSemi(JJTSEMI);
                                                                                                       boolean jjtc006 = true;
                                                                                                       jjtree.openNodeScope(jjtn006);
                                                                                                     }
                                                                                                     try {
/*@egen*/"s"/*@bgen(jjtree)*/
                                                                                                     } finally {
                                                                                                       if (jjtc006) {
                                                                                                         jjtree.closeNodeScope(jjtn006, true);
                                                                                                       }
                                                                                                     }
/*@egen*/       )  )/*@bgen(jjtree)*/
          } catch (Throwable jjte007) {
            if (jjtc007) {
              jjtree.clearNodeScope(jjtn007);
              jjtc007 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte007 instanceof RuntimeException) {
              throw (RuntimeException)jjte007;
            }
            if (jjte007 instanceof ParseException) {
              throw (ParseException)jjte007;
            }
            throw (Error)jjte007;
          } finally {
            if (jjtc007) {
              jjtree.closeNodeScope(jjtn007, true);
            }
          }
/*@egen*/           ) *
}

